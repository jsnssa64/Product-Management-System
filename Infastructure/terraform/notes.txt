Note:
    tfstate file must be stored in a secure remote database if every used in 
    public domain as it contains all sensitive information of your resources 
    including any environment variables

    Create SVG of dependencies

Install graphviz first

Command :
    terraform graph | dot -Tsvg > graph.svg

HowTo:

    Order of Terraform Variables Precedence

Least -> Most 
Environment Variables 
    -   export TF_VAR_XXX=""
Terraform tfvars 
    -   terraform.tfvars  / terraform.tfvars.json
Auto tfvars
    -   variable.auto.tfvars
Vars Flags
    -   terrafirn apply -var "XXX=XXX"


    Reference Attribute of resource Output 

Note:
    This causes an implicit dependency

resource "local_file" "randomfile" {
    content = "my pets name is ${random_pet.pet.id}" // String interpolation
    filename = random_pet.pet.id // Maybe??
}

resource "random_pet" "pet" {
    name="tabatha"
}

    Explicit Dependency 

resource "local_file" "randomfile" {
    content = "my pets name is mrCat"
    filename = "FileName"
    depends_on = [
        random_pet.pet
    ]
}

resource "random_pet" "pet" {
    name="tabatha"
}

    Output Variables

resource "random_pet" "pet" {
    name="tabatha"
}

output pet-name {
    value = random_pet.pet.id   //  Attribute Reference of random_pet
    description = "Record the value of pet Id generated by random_pet resource"
}

    Lifecycle Rules

Terraform whenever updating will destroy the old server and create a new one in its place 
on terraform apply.
If you want to manage the order in what things are deleted you can explicitly define them 
in the terraform lifecycle. 

resource "random_pet" "pet" {
    name="tabatha"

    lifecycle {
        create_before_destroy = true
    }
}

For Database that stores immutable data:

resource "mysql_sqlselfhosted" "productmanagementDb" {
    connectionstring ...

    lifecycle{
        prevent_destroy = true
    }
}

Ignore changes lets you prvent parameters in a resource from being accidentally updated 

resource "mysql_sqlselfhosted" "productmanagementDb" {
    connectionstring ...

    lifecycle{
        ignore_changes = [
            connectionstring,
            ...
        ]
    }
}

    Data Sources

Any services outside of terraform can be imported and used to be used by terraform managed resources 

data "local_file" "outsiderFile" {
    filename = "/root/outsidefile.txt"
}

resource "random_pet" "pet" {
    name=data.local_file.outsidefile.content // Content is local_file attribute exported
}

    Meta Arguments

lifecycle
depends_on
for_each

Note:
    for_each cannot contain duplicate elements so a set rather then a list must be used (set is a list not containing 
    any duplciates)